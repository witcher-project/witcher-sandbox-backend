# Generated by Django 3.2.4 on 2024-09-18 14:00

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("item", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="source",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="created_sources", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="recipecomponent",
            name="item",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="item.baseitem"),
        ),
        migrations.AddField(
            model_name="recipecomponent",
            name="recipe",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="components", to="item.recipe"
            ),
        ),
        migrations.AddField(
            model_name="recipe",
            name="item",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="craft_recipes", to="item.baseitem"
            ),
        ),
        migrations.AddField(
            model_name="recipe",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="created_craft_recipes",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="baseitem",
            name="polymorphic_ctype",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="polymorphic_item.baseitem_set+",
                to="contenttypes.contenttype",
            ),
        ),
        migrations.AddField(
            model_name="baseitem",
            name="tier",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="item.tier"),
        ),
        migrations.AddField(
            model_name="baseitem",
            name="type",
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="item.type"),
        ),
        migrations.AddField(
            model_name="baseitem",
            name="user",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name="Bomb",
            fields=[
                (
                    "basealchemyitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="item.basealchemyitem",
                    ),
                ),
                (
                    "img",
                    models.ImageField(
                        default="assets/alchemy/default_bomb.png",
                        null=True,
                        upload_to="uploads/item/alchemy/decoctions/",
                    ),
                ),
                ("duration_sec", models.PositiveIntegerField(default=5)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("item.basealchemyitem",),
        ),
        migrations.CreateModel(
            name="Oil",
            fields=[
                (
                    "basealchemyitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="item.basealchemyitem",
                    ),
                ),
                (
                    "img",
                    models.ImageField(
                        default="assets/alchemy/default_oil.png", null=True, upload_to="uploads/item/alchemy/oils/"
                    ),
                ),
                ("attack_bonus_perc", models.PositiveSmallIntegerField(default=15)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("item.basealchemyitem",),
        ),
        migrations.CreateModel(
            name="Potion",
            fields=[
                (
                    "basealchemyitem_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="item.basealchemyitem",
                    ),
                ),
                (
                    "img",
                    models.ImageField(
                        default="assets/alchemy/default_potion.png",
                        null=True,
                        upload_to="uploads/item/alchemy/potions/",
                    ),
                ),
                (
                    "potion_type",
                    models.CharField(choices=[("potion", "Potion"), ("decoction", "Decoction")], max_length=50),
                ),
                ("duration_sec", models.PositiveIntegerField()),
                ("tox_points", models.PositiveSmallIntegerField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("item.basealchemyitem",),
        ),
    ]
